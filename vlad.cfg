#
# Vlad configuration file.
#
# Recipe for installing/configuring.
# 0. Unpack the tar.gz file into a source directory. (NOTE: you unpack vlad into one
#	directory, and Install it into (and run it out of) another. 
# 1. Copy config.defaults to config.cfg
# 2. Make desired changes to config.cfg. Mainly, you'll want to:
#    - set vladBuildDir to the (web-accessible) directory where you want it installed. 
#	By default, this directory is used to serve up static content (e.g. the
#	query form), run the CGI (python script), write the output files.
#    - set vladUrl to the appropriate URL (just the path part) for accessing vlad
#	E.g., if you will serve vlad at https://my.server.org/apps/vlad, then
#	vladUrl would be /apps/vlad
#    - by default, the CGI runs out of vladBuildDir. If you need to change that, set 
#	cgiDir and cgiUrl
#    - by default, output files are written to a directory inside of vladBuildDir.
#	If you need to change that, set outputDir and outputUrl
#    - configure the ontologies and the annotation sets that vlad knows about
#	By default, Vlad comes preconfigured with a sample ontology and sample 
#	data set that you can use for testing. In a real installation, you'll want 
#	to configure these sections to point to the real ontologies and annotations
#	that you'll be using.
#    - set the DOT executable variable. Vlad generates graph drawings using the dot
#	program, which is part of the GraphViz package. You'll need to install GraphViz
#	and point Vlad to it.
# 3. Run the Install:
#	python Install config.cfg
# 4. To tweak the installation later, repeat steps 2 and 3.
#
#======================================================
[DEFAULT]

# where the Vlad repo is
vladInstallDir: %(VLAD)s

# home directory for the web app; where to Install static content
vladBuildDir: %(VLAD_BUILD)s

# URL for accessing Vlad 
vladUrl: %(VLAD_URL)s

# where Vlad's data files live
datadir: %(VLAD_DATA)s	

# where CGI+libs go (in case it has to be different)
cgiDir:	%(vladBuildDir)s

# URL of the vlad cgi script
cgiUrl:	%(vladUrl)s/vlad.cgi

# Directory where user results are written (in case it has to be different)
outputDir:%(VLAD_OUTPUT)s

# Corresponding URL (path part)
outputDirUrl:	%(vladUrl)s/output/

# bash executable
bash: /usr/bin/bash

# Python executable
python: /opt/python3.7/bin/python3

#======================================================
[VLAD]

# name of vlad logo file
logofile:	vlad_logo.gif

# name of vlad CGI script
scriptfile:	vlad.cgi

# Evidence codes to exclude
exclude:

# age in days before result temp files are eligible for removal
maxAge:		1

#======================================================
[Ontology.GO]
order:	1
name:	Gene Ontology
file:	%(datadir)s/gene_ontology.obo
namespaces:	biological_process|cellular_component|molecular_function
linkurl:        https://www.godatabase.org/cgi-bin/go.cgi?query=%%s&view=details
evidencecodes:
        EXP=Inferred from experiment
        IAS=Inferred from ancestral sequence
        IBA=Inferred from biological aspect of ancestor
        IBD=Inferred from biological aspect of descendant
        IC=Inferred by curator
        IDA=Inferred from direct assay
        IEA=Inferred from electronic annotation
        IEP=Inferred from expression pattern
        IGI=Inferred from genetic interaction
        IKR=Inferred from key residues
        IMP=Inferred from mutant phenotype
        IMR=Inferred from missing residues
        IPI=Inferred from physical interaction
        IRD=Inferred from rapid divergence
        ISS=Inferred from sequence or structural similarity
        ISO=Inferred from sequence orthology
        ISA=Inferred from sequence alignment
        ISM=Inferred from sequence model
        NAS=Non-traceable author statement
        ND=No biological data available
        RCA=Reviewed computational analysis
        TAS=Traceable author statement
defaultexcluded: ND

[Ontology.MP]
order:	2
name:	Mammalian Phenotype Ontology
file:	%(datadir)s/mammalian_phenotype.obo
namespaces:	mammalian_phenotype=MPheno.ontology
linkurl:        https://www.informatics.jax.org/searches/accession_report.cgi?id=%%s
evidencecodes:
	IMP=inferred from mutant phenotype
	TAS=stated by author
	ND=no data available
	EE=shown by experimental evidence
	CUR=cursory initial screen
defaultexcluded: ND

#[Ontology.AD]
#order:	3
#datadir:	%(vladBuildDir)s/sampledata/ontologies
#name:   Mouse Developmental Anatomy (sample)
#file:   %(datadir)s/mouse_anatomy.obo
#namespaces:     gxd
#linkurl: 	https://www.informatics.jax.org/searches/anatdict.cgi?id=%%s
#evidencecodes:
#defaultexcluded:
#
#[Ontology.PRO]
#order: 4
#datadir:	%(vladBuildDir)s/sampledata/ontologies
#name:   Protein Ontology (sample)
#file:   %(datadir)s/pro.obo
#namespaces:     protein
#linkurl:	https://pir.georgetown.edu/cgi-bin/pro/entry_pro?id=%%s
#evidencecodes:
#defaultexcluded:
#
#======================================================
# This section lists the annotation sets that will appear on the
# query form. Each entry has the following form:
#    [AnnotationSet.NAME]
#    name:	Descriptive name for display
#    datadir:	directory where the annotation file is found
#    file:	%(datadir)s/filename
#    ontology:ONAME
#    objtype:T
# where, NAME is the unique internal id for the annotation set,
# and ONAME is the unique internal id for the ontology to be
# that the annotations use, and T is type of objects annotated.
#
# The following entries are optional. They specify templates
# for constructing URLs from annotated object ids (e.g., to
# fetch a detail page for a gene.
#    linkurl: <url> Template (%s) for creating individual link
#    batchurl: <url> Template (%s) for creating batch link.
#
# Some common linkurls:
#   MGI:	https://www.informatics.jax.org/searches/accession_report.cgi?id=%%s
#   RGD:	https://rgd.mcw.edu/query/query.cgi?id=%%s
#   SGD:	https://genome-www4.stanford.edu/cgi-bin/SGD/locus.pl?sgdid=%%s
#   FB:		https://flybase.bio.indiana.edu/.bin/fbidq.html?%%s
#   SPTR:	https://www.expasy.ch/cgi-bin/sprot-search-ac?%%s
#

[AnnotationSet.MGI_GO]
order:	1
name:	Gene-Function annotations from MGI
file:	%(datadir)s/gene_association.mgi
ontology:GO
objtype:Gene
linkurl:	https://www.informatics.jax.org/searches/accession_report.cgi?id=%%s
batchurl:	https://www.informatics.jax.org/batch/summary?idType=MGI&ids=%%s

[AnnotationSet.MGI_MP_Gene]
order:	2
name:   Gene-Phenotype annotations from MGI
file:   %(datadir)s/MPGeneAnnots.txt
ontology:MP
objtype:Gene
linkurl:	https://www.informatics.jax.org/searches/accession_report.cgi?id=%%s
batchurl:	https://www.informatics.jax.org/batch/summary?idType=MGI&ids=%%s

[AnnotationSet.GOA_Human]
order:  3
name:   Human Gene-Function annotations from GOA 
file:   %(datadir)s/gene_association.goa_human
ontology:GO
objtype:Gene
linkurl:
batchurl:

#
#[AnnotationSet.MGI_MP_Genotype]
#order:	5
#datadir:	%(vladBuildDir)s/sampledata/annotationSets
#name:   Genotype-Phenotype annotations from MGI (sample)
#file:   %(datadir)s/MPGenotypeAnnots.txt
#ontology:MP
#objtype:Genotype
#
#[AnnotationSet.MGI_PRO_Gene]
#order:	4
#datadir:	%(vladBuildDir)s/sampledata/annotationSets
#name:   Gene-PRO annotations from MGI (sample)
#file:   %(datadir)s/PROGeneAnnots.txt
#ontology:PRO
#objtype:Gene
#linkurl:	https://www.informatics.jax.org/searches/accession_report.cgi?id=%%s
#batchurl:	https://www.informatics.jax.org/batch/summary?idType=MGI&ids=%%s
#
#[AnnotationSet.GXD_AD_Gene]
#order:	3
#datadir:	%(vladBuildDir)s/sampledata/annotationSets
#name:   Gene-Expression annotations from GXD (sample)
#file:   %(datadir)s/GXDGeneAnnots.txt
#ontology:AD
#objtype:Gene
#linkurl:	https://www.informatics.jax.org/searches/accession_report.cgi?id=%%s
#batchurl:	https://www.informatics.jax.org/batch/summary?idType=MGI&ids=%%s	
#
#
#======================================================
[DOT]
# Basic settings for generating graph figures using DOT.

# The directory containing the dot executable
installdir:	/usr/bin

# The dot executable.
executable:	%(installdir)s/dot

# When dot is run as a CGI, the effective user (e.g. "www") may not
# have a HOME, and therefore, no .fontconfig cache directory. As
# a result, dot can run extremely slowly. If the following is defined,
# the HOME environment variable will be set to the given value when
# the dot subprocess is spawned. The given directory should contain
# a .fontconfig directroy.
#cgihome: /Users/jer

# List of HSV colors to use for coloring query sets.
qscolors: [
    [0,      1.0, 1.0], # red
    [0.5,    1.0, 1.0], # cyan
    [0.1,    1.0, 1.0], # orange
    [0.6667, 1.0, 1.0], # blue
    [0.1667, 1.0, 1.0], # yellow
    [0.8333, 1.0, 1.0], # purple
    [0.3333, 1.0, 1.0], # green
    ]

#--------------------------------------------------------
# The following sections specify a subgraph structure and DOT 
# default attributes for nodes and edges
#-------------------------

[DOT/]
graph.bgcolor:	"white"

# Specify the default font for node labels at the top level, rather
# than in the /nodes subgraph. This allows us to override it on the
# command line. The reason: different output formats support different
# fonts. (E.g., for doing PNGs or GIFs, Arial is a good san serif font,
# while Helvetica looks awful. But if you want EPS output, Arial is not
# even recognized (and Courier is substituted!) while Helvetica is fine.
# To override, use the "-Nname=value" command line option, e.g.
#	% dot -Nfontname=Helvetica -Teps -o mygraph.eps mygraph.dot
node.fontname:	"Arial"

[DOT/nodes]
# Vanilla drawing style.
node.shape:	"box"
node.style:	"filled"
node.fillcolor:	"white"
node.color:	"black"
node.fontcolor:	"black"
node.fontsize:	9
node.fixedsize:	"true"
node.width:	1

[DOT/edges]
edge.dir:	"back"
edge.weight:	1

[DOT/edges/is_a]
edge.color:	"blue"
edge.arrowtail:	"empty"
edge.weight:	5.0

[DOT/edges/part_of]
edge.color:	"purple"
edge.arrowtail:	"diamond"
edge.weight:	2.5

[DOT/edges/regulates]
edge.color:	"cyan"
edge.arrowtail:	"none"

[DOT/edges/regulates/positive]
edge.color:	"green"
edge.arrowtail:	"vee"

[DOT/edges/regulates/negative]
edge.color:	"red"
edge.arrowtail:	"tee"
